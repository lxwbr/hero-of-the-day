service: hero-of-the-day
provider:
  name: aws
  runtime: rust
  memorySize: 1024
  region: eu-central-1
  stage: dev
  environment:
    HERO_TABLE: ${self:service}-${self:provider.stage}-hero
    SCHEDULE_TABLE: ${self:service}-${self:provider.stage}-schedule
    TIMETABLE_TABLE: ${self:service}-${self:provider.stage}-timetable
    USER_TABLE: ${self:service}-${self:provider.stage}-user
    SLACK_TOKEN_PARAMETER: /${self:service}-${self:provider.stage}/slack-token
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
    HOSTED_DOMAIN: ${env:HOSTED_DOMAIN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "Fn::GetAtt": [ HeroTable, Arn ]
        - "Fn::GetAtt": [ ScheduleTable, Arn ]
        - "Fn::GetAtt": [ UserTable, Arn ]
    - Effect: Allow
      Action:
        - ssm:GetParameter
      Resource: arn:aws:ssm:*:*:parameter/${self:service}-${self:provider.stage}/*

custom:
  rust:
    dockerTag: '0.2.7-rust-1.44.1'

package:
  individually: true

plugins:
  - serverless-rust
  - serverless-pseudo-parameters

functions:
  hero-list:
    handler: hero-list
    description: Provides a list of possible hero handles. Each of the heros can contain several slack members.
    events:
      - http:
          path: hero/list
          method: get
          cors: true
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  hero-get:
    handler: hero-get
    description: Returns hero information with members for provided hero.
    events:
      - http:
          path: hero/{hero}
          method: get
          cors: true
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  schedule-get:
    handler: schedule-get
    description: Returns a schedule for provided hero.
    events:
      - http:
          path: schedule/{hero}
          method: get
          cors: true
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  schedule-update:
    handler: schedule-update
    description: Updates a schedule for provided hero.
    events:
      - http:
          path: schedule/{hero}
          method: post
          cors: true
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  user-create:
    handler: user-create
    description: Creates a user who can be assigned as a hero.
    events:
      - http:
          path: user
          method: post
          cors: true
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  slack-usergroup-users-update:
    handler: slack-usergroup-users-update
    description: Updates the user membership for all heros in slack.
  custom-authorizer:
    handler: custom-authorizer
    description: Checks if the user is allowed to execute one of the above lambdas.

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    # Contains all the heroes (slack handles) which can be assigned to users.
    HeroTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        TableName: !Sub ${self:provider.environment.HERO_TABLE}
    # Contains schedules. A schedule is a planned shift start for user to be assigned to be a hero.
    ScheduleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: hero
            AttributeType: S
          - AttributeName: shift_start_time
            AttributeType: N
        KeySchema:
          - AttributeName: hero
            KeyType: HASH
          - AttributeName: shift_start_time
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        TableName: !Sub ${self:provider.environment.SCHEDULE_TABLE}
    # Contains schedules. A schedule is a planned shift start for user to be assigned to be a hero.
    TimetableTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        TableName: !Sub ${self:provider.environment.TIMETABLE_TABLE}
    # Contains all the e-mail addresses of users who have logged in or been assigned to a hero.
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        TableName: !Sub ${self:provider.environment.USER_TABLE}
    # Needs to contain the Slack token in order to do respective API calls.
    SlackTokenParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: !Sub ${self:provider.environment.SLACK_TOKEN_PARAMETER}
        Type: String
        Value: "Set this parameter to the slack token for updating usergroups."
        Description: Slack token for update operations on usergroups.
