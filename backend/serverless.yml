service: hero-of-the-day
provider:
  name: aws
  runtime: rust
  memorySize: 1024
  region: eu-central-1
  stage: dev
  environment:
    HERO_TABLE: ${self:service}-${self:provider.stage}-hero
    SCHEDULE_TABLE: ${self:service}-${self:provider.stage}-schedule
    USER_TABLE: ${self:service}-${self:provider.stage}-user
    GOOGLE_CLIENT_ID: ${env:GOOGLE_CLIENT_ID}
    HOSTED_DOMAIN: ${env:HOSTED_DOMAIN}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
      Resource:
        - "Fn::GetAtt": [ HeroTable, Arn ]
        - "Fn::GetAtt": [ ScheduleTable, Arn ]
        - "Fn::GetAtt": [ UserTable, Arn ]

custom:
  rust:
    dockerTag: '0.2.6-rust-1.41.0'

package:
  individually: true

plugins:
  - serverless-rust
  - serverless-pseudo-parameters

functions:
  hero-list:
    handler: hero-list
    events:
      - http:
          path: hero/list
          method: get
          cors: true
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  schedule-get:
    handler: schedule-get
    events:
      - http:
          path: schedule/{hero}
          method: get
          cors: true
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  user-create:
    handler: user-create
    events:
      - http:
          path: user
          method: post
          cors: true
          authorizer:
            name: custom-authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  custom-authorizer:
    handler: custom-authorizer

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    GatewayResponseDefault5XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_5XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'
    HeroTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: name
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        TableName: !Sub ${self:provider.environment.HERO_TABLE}
    ScheduleTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: hero
            AttributeType: S
          - AttributeName: shift_start_time
            AttributeType: N
        KeySchema:
          - AttributeName: hero
            KeyType: HASH
          - AttributeName: shift_start_time
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        TableName: !Sub ${self:provider.environment.SCHEDULE_TABLE}
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        SSESpecification:
          SSEEnabled: true
        TableName: !Sub ${self:provider.environment.USER_TABLE}
